{"version":3,"sources":["secret-key.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["key","generatePassword","site","pswd","keySize","Math","floor","length","siteSize","pswdSize","maxSize","max","pswdGenerated","i","keyReduced","j","charCodeAt","String","fromCharCode","x","k","isPrime","substring","num","s","sqrt","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","e","_ref","name","value","setState","defineProperty","handleSubmit","pswdGen","state","toUpperCase","range","document","createRange","selectNodeContents","textArea","sel","window","getSelection","removeAllRanges","addRange","execCommand","_this2","react_default","a","createElement","className","Container","textAlign","Grid","Column","width","Segment","attached","size","Form","Field","Input","onChange","autoComplete","type","Button","content","basic","positive","icon","onClick","ref","textarea","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.997ba194.chunk.js","sourcesContent":["export const key =\n  \"fa6402c858de785713f76ff563ad5fd92a999c81e10212ee67554f84973b737686fbb13655b81184c536d6c286d4e009e4d96d7d02bd88aa73922f030a55da27\";\nexport const alphaNumericChars = '<>,/23?;47\":5][{6}-+=_|*-+`1890';\n","import { key, alphaNumericChars } from \"./secret-key\";\n\nexport const generatePassword = (site, pswd) => {\n  const keySize = Math.floor(key.length / 3);\n  const siteSize = site.length;\n  const pswdSize = pswd.length;\n  const maxSize = Math.max(keySize, siteSize, pswdSize);\n  let pswdGenerated = \"\";\n  for (let i = 0; i <= maxSize; i++) {\n    let keyReduced = 0;\n    for (let j = 0; j <= 3; j++) {\n      if (key[j + i * 3]) {\n        keyReduced = keyReduced + key[j + i * 3].charCodeAt();\n      }\n    }\n    if (site[i]) {\n      keyReduced = keyReduced + site[i].charCodeAt();\n    }\n    if (pswd[i]) {\n      keyReduced = keyReduced + pswd[i].charCodeAt();\n    }\n    pswdGenerated += String.fromCharCode((keyReduced % 93) + 33);\n  }\n  let x = pswdGenerated;\n  for (let k = 0; k < x.length; k++) {\n    if (isPrime(k)) {\n      pswdGenerated =\n        x.substring(0, k) +\n        alphaNumericChars[siteSize % k] +\n        x.substring(k, pswd.length);\n    }\n  }\n  return pswdGenerated;\n};\n\nconst isPrime = num => {\n  for (let i = 2, s = Math.sqrt(num); i <= s; i++)\n    if (num % i === 0) return false;\n  return num !== 1 && num !== 0;\n};\n","import React, { Component } from \"react\";\nimport { Segment, Grid, Container, Button, Form } from \"semantic-ui-react\";\n\nimport { generatePassword } from \"./utils\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      site: \"\",\n      pswd: \"\",\n      pswdGen: \"hi\"\n    };\n  }\n  handleInputChange = (e, { name, value }) => {\n    this.setState({\n      [name]: value\n    });\n  };\n  handleSubmit = () => {\n    this.setState(\n      {\n        pswdGen: generatePassword(\n          this.state.site.toUpperCase(),\n          this.state.pswd\n        )\n      },\n      () => {\n        let range = document.createRange();\n        range.selectNodeContents(this.textArea);\n        let sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n        document.execCommand(\"copy\");\n        sel.removeAllRanges();\n      }\n    );\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Container textAlign=\"center\">\n          <Grid.Column width={16}>\n            <Segment attached=\"top\" textAlign=\"left\">\n              pswd\n            </Segment>\n            <Segment size=\"big\" attached textAlign=\"left\">\n              <Form>\n                <Form.Field>\n                  <label>Site name(in CAPITAL letters)</label>\n                  <Form.Input\n                    name=\"site\"\n                    onChange={this.handleInputChange}\n                    value={this.state.site.toUpperCase()}\n                    autoComplete=\"off\"\n                  />\n                </Form.Field>\n                <Form.Field>\n                  <label>Secret Password</label>\n                  <Form.Input\n                    name=\"pswd\"\n                    type=\"password\"\n                    onChange={this.handleInputChange}\n                    value={this.state.pswd}\n                    autoComplete=\"off\"\n                  />\n                </Form.Field>\n              </Form>\n            </Segment>\n            <Segment size=\"big\" attached=\"bottom\" textAlign=\"right\">\n              <Button\n                content=\"Generate\"\n                basic\n                positive\n                icon=\"unlock alternate\"\n                onClick={this.handleSubmit}\n              />\n            </Segment>\n            {\n              <code\n                ref={textarea => (this.textArea = textarea)}\n                className=\"code\"\n              >\n                {this.state.pswdGen}\n              </code>\n            }\n          </Grid.Column>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}